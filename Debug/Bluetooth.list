
Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c74  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002dfc  08002dfc  00003dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e40  08002e40  00004010  2**0
                  CONTENTS
  4 .ARM          00000008  08002e40  08002e40  00003e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e48  08002e48  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e48  08002e48  00003e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e4c  08002e4c  00003e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002e50  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000010  08002e60  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08002e60  0000417c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085ef  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000146a  00000000  00000000  0000c62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000648  00000000  00000000  0000daa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004cd  00000000  00000000  0000e0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6f9  00000000  00000000  0000e5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009322  00000000  00000000  00028cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b4e6  00000000  00000000  00031fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd4b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001848  00000000  00000000  000cd4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ced44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002de4 	.word	0x08002de4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002de4 	.word	0x08002de4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b598      	push	{r3, r4, r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001dc:	f000 fa12 	bl	8000604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e0:	f000 f832 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e4:	f000 f8e0 	bl	80003a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001e8:	f000 f87e 	bl	80002e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001ec:	f000 f8ac 	bl	8000348 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  HAL_UART_Transmit(&huart1, (uint8_t*) output, 60, 100);
	  HAL_UART_Transmit (&huart1, (uint8_t *) data, strlen (data), 1000);
 80001f0:	4b11      	ldr	r3, [pc, #68]	@ (8000238 <main+0x60>)
 80001f2:	681c      	ldr	r4, [r3, #0]
 80001f4:	4b10      	ldr	r3, [pc, #64]	@ (8000238 <main+0x60>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4618      	mov	r0, r3
 80001fa:	f7ff ffe5 	bl	80001c8 <strlen>
 80001fe:	4603      	mov	r3, r0
 8000200:	b29a      	uxth	r2, r3
 8000202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000206:	4621      	mov	r1, r4
 8000208:	480c      	ldr	r0, [pc, #48]	@ (800023c <main+0x64>)
 800020a:	f002 f91b 	bl	8002444 <HAL_UART_Transmit>
	  HAL_UART_Receive (&huart1, (uint8_t *) input, 60, 1000);
 800020e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000212:	223c      	movs	r2, #60	@ 0x3c
 8000214:	490a      	ldr	r1, [pc, #40]	@ (8000240 <main+0x68>)
 8000216:	4809      	ldr	r0, [pc, #36]	@ (800023c <main+0x64>)
 8000218:	f002 f99d 	bl	8002556 <HAL_UART_Receive>
	  HAL_UART_Transmit (&huart2, (uint8_t *) input, 60, 1000);
 800021c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000220:	223c      	movs	r2, #60	@ 0x3c
 8000222:	4907      	ldr	r1, [pc, #28]	@ (8000240 <main+0x68>)
 8000224:	4807      	ldr	r0, [pc, #28]	@ (8000244 <main+0x6c>)
 8000226:	f002 f90d 	bl	8002444 <HAL_UART_Transmit>
//	  HAL_UART_Receive (&huart2, (uint8_t *) input, 60, 100);
//	  HAL_UART_Transmit (&huart2, (uint8_t *) input, 60, 100);
	  HAL_Delay(1000);
 800022a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800022e:	f000 fa4f 	bl	80006d0 <HAL_Delay>
	  HAL_UART_Transmit (&huart1, (uint8_t *) data, strlen (data), 1000);
 8000232:	bf00      	nop
 8000234:	e7dc      	b.n	80001f0 <main+0x18>
 8000236:	bf00      	nop
 8000238:	20000000 	.word	0x20000000
 800023c:	2000002c 	.word	0x2000002c
 8000240:	2000013c 	.word	0x2000013c
 8000244:	200000b4 	.word	0x200000b4

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b09c      	sub	sp, #112	@ 0x70
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000252:	2228      	movs	r2, #40	@ 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f002 fd97 	bl	8002d8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	605a      	str	r2, [r3, #4]
 8000266:	609a      	str	r2, [r3, #8]
 8000268:	60da      	str	r2, [r3, #12]
 800026a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800026c:	463b      	mov	r3, r7
 800026e:	2234      	movs	r2, #52	@ 0x34
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f002 fd89 	bl	8002d8a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000278:	2302      	movs	r3, #2
 800027a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	2301      	movs	r3, #1
 800027e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000280:	2310      	movs	r3, #16
 8000282:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000284:	2300      	movs	r3, #0
 8000286:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fc9b 	bl	8000bc8 <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000298:	f000 f8aa 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a0:	2300      	movs	r3, #0
 80002a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 fcc4 	bl	8001c44 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002c2:	f000 f895 	bl	80003f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002c6:	2301      	movs	r3, #1
 80002c8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ce:	463b      	mov	r3, r7
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 fed7 	bl	8002084 <HAL_RCCEx_PeriphCLKConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002dc:	f000 f888 	bl	80003f0 <Error_Handler>
  }
}
 80002e0:	bf00      	nop
 80002e2:	3770      	adds	r7, #112	@ 0x70
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002ec:	4b14      	ldr	r3, [pc, #80]	@ (8000340 <MX_USART1_UART_Init+0x58>)
 80002ee:	4a15      	ldr	r2, [pc, #84]	@ (8000344 <MX_USART1_UART_Init+0x5c>)
 80002f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80002f2:	4b13      	ldr	r3, [pc, #76]	@ (8000340 <MX_USART1_UART_Init+0x58>)
 80002f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80002f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002fa:	4b11      	ldr	r3, [pc, #68]	@ (8000340 <MX_USART1_UART_Init+0x58>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000300:	4b0f      	ldr	r3, [pc, #60]	@ (8000340 <MX_USART1_UART_Init+0x58>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000306:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <MX_USART1_UART_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800030c:	4b0c      	ldr	r3, [pc, #48]	@ (8000340 <MX_USART1_UART_Init+0x58>)
 800030e:	220c      	movs	r2, #12
 8000310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000312:	4b0b      	ldr	r3, [pc, #44]	@ (8000340 <MX_USART1_UART_Init+0x58>)
 8000314:	2200      	movs	r2, #0
 8000316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000318:	4b09      	ldr	r3, [pc, #36]	@ (8000340 <MX_USART1_UART_Init+0x58>)
 800031a:	2200      	movs	r2, #0
 800031c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800031e:	4b08      	ldr	r3, [pc, #32]	@ (8000340 <MX_USART1_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000324:	4b06      	ldr	r3, [pc, #24]	@ (8000340 <MX_USART1_UART_Init+0x58>)
 8000326:	2200      	movs	r2, #0
 8000328:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800032a:	4805      	ldr	r0, [pc, #20]	@ (8000340 <MX_USART1_UART_Init+0x58>)
 800032c:	f002 f83c 	bl	80023a8 <HAL_UART_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000336:	f000 f85b 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000002c 	.word	0x2000002c
 8000344:	40013800 	.word	0x40013800

08000348 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800034c:	4b14      	ldr	r3, [pc, #80]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 800034e:	4a15      	ldr	r2, [pc, #84]	@ (80003a4 <MX_USART2_UART_Init+0x5c>)
 8000350:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000352:	4b13      	ldr	r3, [pc, #76]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 8000354:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000358:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800035a:	4b11      	ldr	r3, [pc, #68]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000360:	4b0f      	ldr	r3, [pc, #60]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000366:	4b0e      	ldr	r3, [pc, #56]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800036c:	4b0c      	ldr	r3, [pc, #48]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 800036e:	220c      	movs	r2, #12
 8000370:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000372:	4b0b      	ldr	r3, [pc, #44]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000378:	4b09      	ldr	r3, [pc, #36]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800037e:	4b08      	ldr	r3, [pc, #32]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 8000380:	2200      	movs	r2, #0
 8000382:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000384:	4b06      	ldr	r3, [pc, #24]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 8000386:	2200      	movs	r2, #0
 8000388:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800038a:	4805      	ldr	r0, [pc, #20]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 800038c:	f002 f80c 	bl	80023a8 <HAL_UART_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000396:	f000 f82b 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	200000b4 	.word	0x200000b4
 80003a4:	40004400 	.word	0x40004400

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b0f      	ldr	r3, [pc, #60]	@ (80003ec <MX_GPIO_Init+0x44>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	4a0e      	ldr	r2, [pc, #56]	@ (80003ec <MX_GPIO_Init+0x44>)
 80003b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003b8:	6153      	str	r3, [r2, #20]
 80003ba:	4b0c      	ldr	r3, [pc, #48]	@ (80003ec <MX_GPIO_Init+0x44>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c6:	4b09      	ldr	r3, [pc, #36]	@ (80003ec <MX_GPIO_Init+0x44>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a08      	ldr	r2, [pc, #32]	@ (80003ec <MX_GPIO_Init+0x44>)
 80003cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b06      	ldr	r3, [pc, #24]	@ (80003ec <MX_GPIO_Init+0x44>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80003da:	603b      	str	r3, [r7, #0]
 80003dc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003de:	bf00      	nop
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <Error_Handler+0x8>

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <HAL_MspInit+0x44>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a0e      	ldr	r2, [pc, #56]	@ (8000440 <HAL_MspInit+0x44>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <HAL_MspInit+0x44>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <HAL_MspInit+0x44>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a08      	ldr	r2, [pc, #32]	@ (8000440 <HAL_MspInit+0x44>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <HAL_MspInit+0x44>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800042e:	603b      	str	r3, [r7, #0]
 8000430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000

08000444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08c      	sub	sp, #48	@ 0x30
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	f107 031c 	add.w	r3, r7, #28
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a2e      	ldr	r2, [pc, #184]	@ (800051c <HAL_UART_MspInit+0xd8>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d128      	bne.n	80004b8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000466:	4b2e      	ldr	r3, [pc, #184]	@ (8000520 <HAL_UART_MspInit+0xdc>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a2d      	ldr	r2, [pc, #180]	@ (8000520 <HAL_UART_MspInit+0xdc>)
 800046c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000470:	6193      	str	r3, [r2, #24]
 8000472:	4b2b      	ldr	r3, [pc, #172]	@ (8000520 <HAL_UART_MspInit+0xdc>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800047a:	61bb      	str	r3, [r7, #24]
 800047c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800047e:	4b28      	ldr	r3, [pc, #160]	@ (8000520 <HAL_UART_MspInit+0xdc>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a27      	ldr	r2, [pc, #156]	@ (8000520 <HAL_UART_MspInit+0xdc>)
 8000484:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b25      	ldr	r3, [pc, #148]	@ (8000520 <HAL_UART_MspInit+0xdc>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000496:	2330      	movs	r3, #48	@ 0x30
 8000498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049a:	2302      	movs	r3, #2
 800049c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a2:	2303      	movs	r3, #3
 80004a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004a6:	2307      	movs	r3, #7
 80004a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004aa:	f107 031c 	add.w	r3, r7, #28
 80004ae:	4619      	mov	r1, r3
 80004b0:	481c      	ldr	r0, [pc, #112]	@ (8000524 <HAL_UART_MspInit+0xe0>)
 80004b2:	f000 fa17 	bl	80008e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004b6:	e02d      	b.n	8000514 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000528 <HAL_UART_MspInit+0xe4>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d128      	bne.n	8000514 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80004c2:	4b17      	ldr	r3, [pc, #92]	@ (8000520 <HAL_UART_MspInit+0xdc>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	4a16      	ldr	r2, [pc, #88]	@ (8000520 <HAL_UART_MspInit+0xdc>)
 80004c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004cc:	61d3      	str	r3, [r2, #28]
 80004ce:	4b14      	ldr	r3, [pc, #80]	@ (8000520 <HAL_UART_MspInit+0xdc>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b11      	ldr	r3, [pc, #68]	@ (8000520 <HAL_UART_MspInit+0xdc>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a10      	ldr	r2, [pc, #64]	@ (8000520 <HAL_UART_MspInit+0xdc>)
 80004e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000520 <HAL_UART_MspInit+0xdc>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004f2:	230c      	movs	r3, #12
 80004f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f6:	2302      	movs	r3, #2
 80004f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004fe:	2303      	movs	r3, #3
 8000500:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000502:	2307      	movs	r3, #7
 8000504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000506:	f107 031c 	add.w	r3, r7, #28
 800050a:	4619      	mov	r1, r3
 800050c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000510:	f000 f9e8 	bl	80008e4 <HAL_GPIO_Init>
}
 8000514:	bf00      	nop
 8000516:	3730      	adds	r7, #48	@ 0x30
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40013800 	.word	0x40013800
 8000520:	40021000 	.word	0x40021000
 8000524:	48000800 	.word	0x48000800
 8000528:	40004400 	.word	0x40004400

0800052c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <NMI_Handler+0x4>

08000534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <HardFault_Handler+0x4>

0800053c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <MemManage_Handler+0x4>

08000544 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <BusFault_Handler+0x4>

0800054c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <UsageFault_Handler+0x4>

08000554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000582:	f000 f885 	bl	8000690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000590:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <SystemInit+0x20>)
 8000592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000596:	4a05      	ldr	r2, [pc, #20]	@ (80005ac <SystemInit+0x20>)
 8000598:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800059c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000ed00 	.word	0xe000ed00

080005b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005e8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b4:	f7ff ffea 	bl	800058c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480c      	ldr	r0, [pc, #48]	@ (80005ec <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490d      	ldr	r1, [pc, #52]	@ (80005f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0d      	ldr	r2, [pc, #52]	@ (80005f4 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	@ (80005f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0a      	ldr	r4, [pc, #40]	@ (80005fc <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005de:	f002 fbdd 	bl	8002d9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005e2:	f7ff fdf9 	bl	80001d8 <main>

080005e6 <LoopForever>:

LoopForever:
    b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005e8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80005f4:	08002e50 	.word	0x08002e50
  ldr r2, =_sbss
 80005f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80005fc:	2000017c 	.word	0x2000017c

08000600 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC1_IRQHandler>
	...

08000604 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000608:	4b08      	ldr	r3, [pc, #32]	@ (800062c <HAL_Init+0x28>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a07      	ldr	r2, [pc, #28]	@ (800062c <HAL_Init+0x28>)
 800060e:	f043 0310 	orr.w	r3, r3, #16
 8000612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000614:	2003      	movs	r0, #3
 8000616:	f000 f931 	bl	800087c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800061a:	200f      	movs	r0, #15
 800061c:	f000 f808 	bl	8000630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000620:	f7ff feec 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000624:	2300      	movs	r3, #0
}
 8000626:	4618      	mov	r0, r3
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40022000 	.word	0x40022000

08000630 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000638:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <HAL_InitTick+0x54>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <HAL_InitTick+0x58>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4619      	mov	r1, r3
 8000642:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000646:	fbb3 f3f1 	udiv	r3, r3, r1
 800064a:	fbb2 f3f3 	udiv	r3, r2, r3
 800064e:	4618      	mov	r0, r3
 8000650:	f000 f93b 	bl	80008ca <HAL_SYSTICK_Config>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800065a:	2301      	movs	r3, #1
 800065c:	e00e      	b.n	800067c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d80a      	bhi.n	800067a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000664:	2200      	movs	r2, #0
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	f04f 30ff 	mov.w	r0, #4294967295
 800066c:	f000 f911 	bl	8000892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000670:	4a06      	ldr	r2, [pc, #24]	@ (800068c <HAL_InitTick+0x5c>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000676:	2300      	movs	r3, #0
 8000678:	e000      	b.n	800067c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800067a:	2301      	movs	r3, #1
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000004 	.word	0x20000004
 8000688:	2000000c 	.word	0x2000000c
 800068c:	20000008 	.word	0x20000008

08000690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <HAL_IncTick+0x20>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <HAL_IncTick+0x24>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4413      	add	r3, r2
 80006a0:	4a04      	ldr	r2, [pc, #16]	@ (80006b4 <HAL_IncTick+0x24>)
 80006a2:	6013      	str	r3, [r2, #0]
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	2000000c 	.word	0x2000000c
 80006b4:	20000178 	.word	0x20000178

080006b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80006bc:	4b03      	ldr	r3, [pc, #12]	@ (80006cc <HAL_GetTick+0x14>)
 80006be:	681b      	ldr	r3, [r3, #0]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	20000178 	.word	0x20000178

080006d0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d8:	f7ff ffee 	bl	80006b8 <HAL_GetTick>
 80006dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e8:	d005      	beq.n	80006f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <HAL_Delay+0x44>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	4413      	add	r3, r2
 80006f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006f6:	bf00      	nop
 80006f8:	f7ff ffde 	bl	80006b8 <HAL_GetTick>
 80006fc:	4602      	mov	r2, r0
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	429a      	cmp	r2, r3
 8000706:	d8f7      	bhi.n	80006f8 <HAL_Delay+0x28>
  {
  }
}
 8000708:	bf00      	nop
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000000c 	.word	0x2000000c

08000718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f003 0307 	and.w	r3, r3, #7
 8000726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <__NVIC_SetPriorityGrouping+0x44>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000734:	4013      	ands	r3, r2
 8000736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000740:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074a:	4a04      	ldr	r2, [pc, #16]	@ (800075c <__NVIC_SetPriorityGrouping+0x44>)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	60d3      	str	r3, [r2, #12]
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000764:	4b04      	ldr	r3, [pc, #16]	@ (8000778 <__NVIC_GetPriorityGrouping+0x18>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	f003 0307 	and.w	r3, r3, #7
}
 800076e:	4618      	mov	r0, r3
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	6039      	str	r1, [r7, #0]
 8000786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078c:	2b00      	cmp	r3, #0
 800078e:	db0a      	blt.n	80007a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	b2da      	uxtb	r2, r3
 8000794:	490c      	ldr	r1, [pc, #48]	@ (80007c8 <__NVIC_SetPriority+0x4c>)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	0112      	lsls	r2, r2, #4
 800079c:	b2d2      	uxtb	r2, r2
 800079e:	440b      	add	r3, r1
 80007a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a4:	e00a      	b.n	80007bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4908      	ldr	r1, [pc, #32]	@ (80007cc <__NVIC_SetPriority+0x50>)
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	3b04      	subs	r3, #4
 80007b4:	0112      	lsls	r2, r2, #4
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	440b      	add	r3, r1
 80007ba:	761a      	strb	r2, [r3, #24]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	e000e100 	.word	0xe000e100
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b089      	sub	sp, #36	@ 0x24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	f1c3 0307 	rsb	r3, r3, #7
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	bf28      	it	cs
 80007ee:	2304      	movcs	r3, #4
 80007f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3304      	adds	r3, #4
 80007f6:	2b06      	cmp	r3, #6
 80007f8:	d902      	bls.n	8000800 <NVIC_EncodePriority+0x30>
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3b03      	subs	r3, #3
 80007fe:	e000      	b.n	8000802 <NVIC_EncodePriority+0x32>
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	f04f 32ff 	mov.w	r2, #4294967295
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43da      	mvns	r2, r3
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	401a      	ands	r2, r3
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000818:	f04f 31ff 	mov.w	r1, #4294967295
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	43d9      	mvns	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	4313      	orrs	r3, r2
         );
}
 800082a:	4618      	mov	r0, r3
 800082c:	3724      	adds	r7, #36	@ 0x24
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000848:	d301      	bcc.n	800084e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084a:	2301      	movs	r3, #1
 800084c:	e00f      	b.n	800086e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084e:	4a0a      	ldr	r2, [pc, #40]	@ (8000878 <SysTick_Config+0x40>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3b01      	subs	r3, #1
 8000854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000856:	210f      	movs	r1, #15
 8000858:	f04f 30ff 	mov.w	r0, #4294967295
 800085c:	f7ff ff8e 	bl	800077c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000860:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <SysTick_Config+0x40>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000866:	4b04      	ldr	r3, [pc, #16]	@ (8000878 <SysTick_Config+0x40>)
 8000868:	2207      	movs	r2, #7
 800086a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	e000e010 	.word	0xe000e010

0800087c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ff47 	bl	8000718 <__NVIC_SetPriorityGrouping>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b086      	sub	sp, #24
 8000896:	af00      	add	r7, sp, #0
 8000898:	4603      	mov	r3, r0
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a4:	f7ff ff5c 	bl	8000760 <__NVIC_GetPriorityGrouping>
 80008a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	68b9      	ldr	r1, [r7, #8]
 80008ae:	6978      	ldr	r0, [r7, #20]
 80008b0:	f7ff ff8e 	bl	80007d0 <NVIC_EncodePriority>
 80008b4:	4602      	mov	r2, r0
 80008b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ba:	4611      	mov	r1, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff5d 	bl	800077c <__NVIC_SetPriority>
}
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff ffb0 	bl	8000838 <SysTick_Config>
 80008d8:	4603      	mov	r3, r0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b087      	sub	sp, #28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f2:	e14e      	b.n	8000b92 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	2101      	movs	r1, #1
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	4013      	ands	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	f000 8140 	beq.w	8000b8c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f003 0303 	and.w	r3, r3, #3
 8000914:	2b01      	cmp	r3, #1
 8000916:	d005      	beq.n	8000924 <HAL_GPIO_Init+0x40>
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 0303 	and.w	r3, r3, #3
 8000920:	2b02      	cmp	r3, #2
 8000922:	d130      	bne.n	8000986 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	2203      	movs	r2, #3
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4013      	ands	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	68da      	ldr	r2, [r3, #12]
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	4313      	orrs	r3, r2
 800094c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800095a:	2201      	movs	r2, #1
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4013      	ands	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	091b      	lsrs	r3, r3, #4
 8000970:	f003 0201 	and.w	r2, r3, #1
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f003 0303 	and.w	r3, r3, #3
 800098e:	2b03      	cmp	r3, #3
 8000990:	d017      	beq.n	80009c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	2203      	movs	r2, #3
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43db      	mvns	r3, r3
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4013      	ands	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d123      	bne.n	8000a16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	08da      	lsrs	r2, r3, #3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3208      	adds	r2, #8
 80009d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	220f      	movs	r2, #15
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	691a      	ldr	r2, [r3, #16]
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	f003 0307 	and.w	r3, r3, #7
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	08da      	lsrs	r2, r3, #3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3208      	adds	r2, #8
 8000a10:	6939      	ldr	r1, [r7, #16]
 8000a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	2203      	movs	r2, #3
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f003 0203 	and.w	r2, r3, #3
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f000 809a 	beq.w	8000b8c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a58:	4b55      	ldr	r3, [pc, #340]	@ (8000bb0 <HAL_GPIO_Init+0x2cc>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a54      	ldr	r2, [pc, #336]	@ (8000bb0 <HAL_GPIO_Init+0x2cc>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b52      	ldr	r3, [pc, #328]	@ (8000bb0 <HAL_GPIO_Init+0x2cc>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a70:	4a50      	ldr	r2, [pc, #320]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	089b      	lsrs	r3, r3, #2
 8000a76:	3302      	adds	r3, #2
 8000a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	f003 0303 	and.w	r3, r3, #3
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	220f      	movs	r2, #15
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a9a:	d013      	beq.n	8000ac4 <HAL_GPIO_Init+0x1e0>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a46      	ldr	r2, [pc, #280]	@ (8000bb8 <HAL_GPIO_Init+0x2d4>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d00d      	beq.n	8000ac0 <HAL_GPIO_Init+0x1dc>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a45      	ldr	r2, [pc, #276]	@ (8000bbc <HAL_GPIO_Init+0x2d8>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d007      	beq.n	8000abc <HAL_GPIO_Init+0x1d8>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a44      	ldr	r2, [pc, #272]	@ (8000bc0 <HAL_GPIO_Init+0x2dc>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d101      	bne.n	8000ab8 <HAL_GPIO_Init+0x1d4>
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	e006      	b.n	8000ac6 <HAL_GPIO_Init+0x1e2>
 8000ab8:	2305      	movs	r3, #5
 8000aba:	e004      	b.n	8000ac6 <HAL_GPIO_Init+0x1e2>
 8000abc:	2302      	movs	r3, #2
 8000abe:	e002      	b.n	8000ac6 <HAL_GPIO_Init+0x1e2>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e000      	b.n	8000ac6 <HAL_GPIO_Init+0x1e2>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	f002 0203 	and.w	r2, r2, #3
 8000acc:	0092      	lsls	r2, r2, #2
 8000ace:	4093      	lsls	r3, r2
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ad6:	4937      	ldr	r1, [pc, #220]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	089b      	lsrs	r3, r3, #2
 8000adc:	3302      	adds	r3, #2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ae4:	4b37      	ldr	r3, [pc, #220]	@ (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d003      	beq.n	8000b08 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b08:	4a2e      	ldr	r2, [pc, #184]	@ (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b32:	4a24      	ldr	r2, [pc, #144]	@ (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b38:	4b22      	ldr	r3, [pc, #136]	@ (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	43db      	mvns	r3, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b5c:	4a19      	ldr	r2, [pc, #100]	@ (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b62:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b86:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	fa22 f303 	lsr.w	r3, r2, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f47f aea9 	bne.w	80008f4 <HAL_GPIO_Init+0x10>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	371c      	adds	r7, #28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40010000 	.word	0x40010000
 8000bb8:	48000400 	.word	0x48000400
 8000bbc:	48000800 	.word	0x48000800
 8000bc0:	48000c00 	.word	0x48000c00
 8000bc4:	40010400 	.word	0x40010400

08000bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000bd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000bd8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000bde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	f001 b823 	b.w	8001c34 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000bf2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 817d 	beq.w	8000efe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c04:	4bbc      	ldr	r3, [pc, #752]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 030c 	and.w	r3, r3, #12
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	d00c      	beq.n	8000c2a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c10:	4bb9      	ldr	r3, [pc, #740]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 030c 	and.w	r3, r3, #12
 8000c18:	2b08      	cmp	r3, #8
 8000c1a:	d15c      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x10e>
 8000c1c:	4bb6      	ldr	r3, [pc, #728]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c28:	d155      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x10e>
 8000c2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c2e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c32:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000c36:	fa93 f3a3 	rbit	r3, r3
 8000c3a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c3e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c42:	fab3 f383 	clz	r3, r3
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	095b      	lsrs	r3, r3, #5
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d102      	bne.n	8000c5c <HAL_RCC_OscConfig+0x94>
 8000c56:	4ba8      	ldr	r3, [pc, #672]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	e015      	b.n	8000c88 <HAL_RCC_OscConfig+0xc0>
 8000c5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c60:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c64:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000c68:	fa93 f3a3 	rbit	r3, r3
 8000c6c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000c70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c74:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000c78:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000c7c:	fa93 f3a3 	rbit	r3, r3
 8000c80:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000c84:	4b9c      	ldr	r3, [pc, #624]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c8c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000c90:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000c94:	fa92 f2a2 	rbit	r2, r2
 8000c98:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000c9c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	f042 0220 	orr.w	r2, r2, #32
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	f002 021f 	and.w	r2, r2, #31
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f000 811f 	beq.w	8000efc <HAL_RCC_OscConfig+0x334>
 8000cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f040 8116 	bne.w	8000efc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	f000 bfaf 	b.w	8001c34 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ce6:	d106      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x12e>
 8000ce8:	4b83      	ldr	r3, [pc, #524]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a82      	ldr	r2, [pc, #520]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	e036      	b.n	8000d64 <HAL_RCC_OscConfig+0x19c>
 8000cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10c      	bne.n	8000d20 <HAL_RCC_OscConfig+0x158>
 8000d06:	4b7c      	ldr	r3, [pc, #496]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a7b      	ldr	r2, [pc, #492]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000d0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	4b79      	ldr	r3, [pc, #484]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a78      	ldr	r2, [pc, #480]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000d18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	e021      	b.n	8000d64 <HAL_RCC_OscConfig+0x19c>
 8000d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d30:	d10c      	bne.n	8000d4c <HAL_RCC_OscConfig+0x184>
 8000d32:	4b71      	ldr	r3, [pc, #452]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a70      	ldr	r2, [pc, #448]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	4b6e      	ldr	r3, [pc, #440]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a6d      	ldr	r2, [pc, #436]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	e00b      	b.n	8000d64 <HAL_RCC_OscConfig+0x19c>
 8000d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a69      	ldr	r2, [pc, #420]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	4b67      	ldr	r3, [pc, #412]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a66      	ldr	r2, [pc, #408]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000d5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d62:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d64:	4b64      	ldr	r3, [pc, #400]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d68:	f023 020f 	bic.w	r2, r3, #15
 8000d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	495f      	ldr	r1, [pc, #380]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d059      	beq.n	8000e42 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fc93 	bl	80006b8 <HAL_GetTick>
 8000d92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d96:	e00a      	b.n	8000dae <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d98:	f7ff fc8e 	bl	80006b8 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	2b64      	cmp	r3, #100	@ 0x64
 8000da6:	d902      	bls.n	8000dae <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000da8:	2303      	movs	r3, #3
 8000daa:	f000 bf43 	b.w	8001c34 <HAL_RCC_OscConfig+0x106c>
 8000dae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000db2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000dba:	fa93 f3a3 	rbit	r3, r3
 8000dbe:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000dc2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc6:	fab3 f383 	clz	r3, r3
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	095b      	lsrs	r3, r3, #5
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d102      	bne.n	8000de0 <HAL_RCC_OscConfig+0x218>
 8000dda:	4b47      	ldr	r3, [pc, #284]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	e015      	b.n	8000e0c <HAL_RCC_OscConfig+0x244>
 8000de0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000de4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000dec:	fa93 f3a3 	rbit	r3, r3
 8000df0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000df4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000df8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000dfc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000e00:	fa93 f3a3 	rbit	r3, r3
 8000e04:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000e08:	4b3b      	ldr	r3, [pc, #236]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e10:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000e14:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000e18:	fa92 f2a2 	rbit	r2, r2
 8000e1c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000e20:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000e24:	fab2 f282 	clz	r2, r2
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	f042 0220 	orr.w	r2, r2, #32
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	f002 021f 	and.w	r2, r2, #31
 8000e34:	2101      	movs	r1, #1
 8000e36:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0ab      	beq.n	8000d98 <HAL_RCC_OscConfig+0x1d0>
 8000e40:	e05d      	b.n	8000efe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e42:	f7ff fc39 	bl	80006b8 <HAL_GetTick>
 8000e46:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4a:	e00a      	b.n	8000e62 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e4c:	f7ff fc34 	bl	80006b8 <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b64      	cmp	r3, #100	@ 0x64
 8000e5a:	d902      	bls.n	8000e62 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	f000 bee9 	b.w	8001c34 <HAL_RCC_OscConfig+0x106c>
 8000e62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e66:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000e76:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7a:	fab3 f383 	clz	r3, r3
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	095b      	lsrs	r3, r3, #5
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d102      	bne.n	8000e94 <HAL_RCC_OscConfig+0x2cc>
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	e015      	b.n	8000ec0 <HAL_RCC_OscConfig+0x2f8>
 8000e94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e98:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000ea0:	fa93 f3a3 	rbit	r3, r3
 8000ea4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000ea8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eac:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000eb0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000eb4:	fa93 f3a3 	rbit	r3, r3
 8000eb8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_RCC_OscConfig+0x330>)
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ec4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8000ec8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000ecc:	fa92 f2a2 	rbit	r2, r2
 8000ed0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8000ed4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000ed8:	fab2 f282 	clz	r2, r2
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	f042 0220 	orr.w	r2, r2, #32
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	f002 021f 	and.w	r2, r2, #31
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fa01 f202 	lsl.w	r2, r1, r2
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1ab      	bne.n	8000e4c <HAL_RCC_OscConfig+0x284>
 8000ef4:	e003      	b.n	8000efe <HAL_RCC_OscConfig+0x336>
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 817d 	beq.w	800120e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f14:	4ba6      	ldr	r3, [pc, #664]	@ (80011b0 <HAL_RCC_OscConfig+0x5e8>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d00b      	beq.n	8000f38 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f20:	4ba3      	ldr	r3, [pc, #652]	@ (80011b0 <HAL_RCC_OscConfig+0x5e8>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 030c 	and.w	r3, r3, #12
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d172      	bne.n	8001012 <HAL_RCC_OscConfig+0x44a>
 8000f2c:	4ba0      	ldr	r3, [pc, #640]	@ (80011b0 <HAL_RCC_OscConfig+0x5e8>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d16c      	bne.n	8001012 <HAL_RCC_OscConfig+0x44a>
 8000f38:	2302      	movs	r3, #2
 8000f3a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000f42:	fa93 f3a3 	rbit	r3, r3
 8000f46:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8000f4a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f4e:	fab3 f383 	clz	r3, r3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	095b      	lsrs	r3, r3, #5
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d102      	bne.n	8000f68 <HAL_RCC_OscConfig+0x3a0>
 8000f62:	4b93      	ldr	r3, [pc, #588]	@ (80011b0 <HAL_RCC_OscConfig+0x5e8>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	e013      	b.n	8000f90 <HAL_RCC_OscConfig+0x3c8>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8000f72:	fa93 f3a3 	rbit	r3, r3
 8000f76:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000f80:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000f84:	fa93 f3a3 	rbit	r3, r3
 8000f88:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8000f8c:	4b88      	ldr	r3, [pc, #544]	@ (80011b0 <HAL_RCC_OscConfig+0x5e8>)
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f90:	2202      	movs	r2, #2
 8000f92:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8000f96:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000f9a:	fa92 f2a2 	rbit	r2, r2
 8000f9e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8000fa2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8000fa6:	fab2 f282 	clz	r2, r2
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	f042 0220 	orr.w	r2, r2, #32
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	f002 021f 	and.w	r2, r2, #31
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d00a      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x410>
 8000fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d002      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	f000 be2e 	b.w	8001c34 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd8:	4b75      	ldr	r3, [pc, #468]	@ (80011b0 <HAL_RCC_OscConfig+0x5e8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fe4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	21f8      	movs	r1, #248	@ 0xf8
 8000fee:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000ff6:	fa91 f1a1 	rbit	r1, r1
 8000ffa:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8000ffe:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001002:	fab1 f181 	clz	r1, r1
 8001006:	b2c9      	uxtb	r1, r1
 8001008:	408b      	lsls	r3, r1
 800100a:	4969      	ldr	r1, [pc, #420]	@ (80011b0 <HAL_RCC_OscConfig+0x5e8>)
 800100c:	4313      	orrs	r3, r2
 800100e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001010:	e0fd      	b.n	800120e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001016:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 8088 	beq.w	8001134 <HAL_RCC_OscConfig+0x56c>
 8001024:	2301      	movs	r3, #1
 8001026:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800102e:	fa93 f3a3 	rbit	r3, r3
 8001032:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001036:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800103a:	fab3 f383 	clz	r3, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001044:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	461a      	mov	r2, r3
 800104c:	2301      	movs	r3, #1
 800104e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fb32 	bl	80006b8 <HAL_GetTick>
 8001054:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001058:	e00a      	b.n	8001070 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800105a:	f7ff fb2d 	bl	80006b8 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d902      	bls.n	8001070 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	f000 bde2 	b.w	8001c34 <HAL_RCC_OscConfig+0x106c>
 8001070:	2302      	movs	r3, #2
 8001072:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800107a:	fa93 f3a3 	rbit	r3, r3
 800107e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001082:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001086:	fab3 f383 	clz	r3, r3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	095b      	lsrs	r3, r3, #5
 800108e:	b2db      	uxtb	r3, r3
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b01      	cmp	r3, #1
 8001098:	d102      	bne.n	80010a0 <HAL_RCC_OscConfig+0x4d8>
 800109a:	4b45      	ldr	r3, [pc, #276]	@ (80011b0 <HAL_RCC_OscConfig+0x5e8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	e013      	b.n	80010c8 <HAL_RCC_OscConfig+0x500>
 80010a0:	2302      	movs	r3, #2
 80010a2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80010aa:	fa93 f3a3 	rbit	r3, r3
 80010ae:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80010b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80010bc:	fa93 f3a3 	rbit	r3, r3
 80010c0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80010c4:	4b3a      	ldr	r3, [pc, #232]	@ (80011b0 <HAL_RCC_OscConfig+0x5e8>)
 80010c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c8:	2202      	movs	r2, #2
 80010ca:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80010ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80010d2:	fa92 f2a2 	rbit	r2, r2
 80010d6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80010da:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80010de:	fab2 f282 	clz	r2, r2
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	f042 0220 	orr.w	r2, r2, #32
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	f002 021f 	and.w	r2, r2, #31
 80010ee:	2101      	movs	r1, #1
 80010f0:	fa01 f202 	lsl.w	r2, r1, r2
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0af      	beq.n	800105a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fa:	4b2d      	ldr	r3, [pc, #180]	@ (80011b0 <HAL_RCC_OscConfig+0x5e8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001106:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	21f8      	movs	r1, #248	@ 0xf8
 8001110:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001114:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001118:	fa91 f1a1 	rbit	r1, r1
 800111c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001120:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001124:	fab1 f181 	clz	r1, r1
 8001128:	b2c9      	uxtb	r1, r1
 800112a:	408b      	lsls	r3, r1
 800112c:	4920      	ldr	r1, [pc, #128]	@ (80011b0 <HAL_RCC_OscConfig+0x5e8>)
 800112e:	4313      	orrs	r3, r2
 8001130:	600b      	str	r3, [r1, #0]
 8001132:	e06c      	b.n	800120e <HAL_RCC_OscConfig+0x646>
 8001134:	2301      	movs	r3, #1
 8001136:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800113e:	fa93 f3a3 	rbit	r3, r3
 8001142:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001146:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800114a:	fab3 f383 	clz	r3, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001154:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	461a      	mov	r2, r3
 800115c:	2300      	movs	r3, #0
 800115e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff faaa 	bl	80006b8 <HAL_GetTick>
 8001164:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001168:	e00a      	b.n	8001180 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116a:	f7ff faa5 	bl	80006b8 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d902      	bls.n	8001180 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	f000 bd5a 	b.w	8001c34 <HAL_RCC_OscConfig+0x106c>
 8001180:	2302      	movs	r3, #2
 8001182:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800118a:	fa93 f3a3 	rbit	r3, r3
 800118e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001192:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001196:	fab3 f383 	clz	r3, r3
 800119a:	b2db      	uxtb	r3, r3
 800119c:	095b      	lsrs	r3, r3, #5
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d104      	bne.n	80011b4 <HAL_RCC_OscConfig+0x5ec>
 80011aa:	4b01      	ldr	r3, [pc, #4]	@ (80011b0 <HAL_RCC_OscConfig+0x5e8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	e015      	b.n	80011dc <HAL_RCC_OscConfig+0x614>
 80011b0:	40021000 	.word	0x40021000
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80011c6:	2302      	movs	r3, #2
 80011c8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80011cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80011d0:	fa93 f3a3 	rbit	r3, r3
 80011d4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80011d8:	4bc8      	ldr	r3, [pc, #800]	@ (80014fc <HAL_RCC_OscConfig+0x934>)
 80011da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011dc:	2202      	movs	r2, #2
 80011de:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80011e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80011e6:	fa92 f2a2 	rbit	r2, r2
 80011ea:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80011ee:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80011f2:	fab2 f282 	clz	r2, r2
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	f042 0220 	orr.w	r2, r2, #32
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	f002 021f 	and.w	r2, r2, #31
 8001202:	2101      	movs	r1, #1
 8001204:	fa01 f202 	lsl.w	r2, r1, r2
 8001208:	4013      	ands	r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1ad      	bne.n	800116a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001212:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 8110 	beq.w	8001444 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001228:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d079      	beq.n	8001328 <HAL_RCC_OscConfig+0x760>
 8001234:	2301      	movs	r3, #1
 8001236:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800124a:	fab3 f383 	clz	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	4bab      	ldr	r3, [pc, #684]	@ (8001500 <HAL_RCC_OscConfig+0x938>)
 8001254:	4413      	add	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	461a      	mov	r2, r3
 800125a:	2301      	movs	r3, #1
 800125c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125e:	f7ff fa2b 	bl	80006b8 <HAL_GetTick>
 8001262:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001266:	e00a      	b.n	800127e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001268:	f7ff fa26 	bl	80006b8 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d902      	bls.n	800127e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	f000 bcdb 	b.w	8001c34 <HAL_RCC_OscConfig+0x106c>
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001284:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001288:	fa93 f3a3 	rbit	r3, r3
 800128c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001294:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001298:	2202      	movs	r2, #2
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	fa93 f2a3 	rbit	r2, r3
 80012aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012bc:	2202      	movs	r2, #2
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	fa93 f2a3 	rbit	r2, r3
 80012ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d8:	4b88      	ldr	r3, [pc, #544]	@ (80014fc <HAL_RCC_OscConfig+0x934>)
 80012da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80012e4:	2102      	movs	r1, #2
 80012e6:	6019      	str	r1, [r3, #0]
 80012e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	fa93 f1a3 	rbit	r1, r3
 80012f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80012fe:	6019      	str	r1, [r3, #0]
  return result;
 8001300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001304:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	fab3 f383 	clz	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001314:	b2db      	uxtb	r3, r3
 8001316:	f003 031f 	and.w	r3, r3, #31
 800131a:	2101      	movs	r1, #1
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	4013      	ands	r3, r2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0a0      	beq.n	8001268 <HAL_RCC_OscConfig+0x6a0>
 8001326:	e08d      	b.n	8001444 <HAL_RCC_OscConfig+0x87c>
 8001328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800132c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001338:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	fa93 f2a3 	rbit	r2, r3
 8001342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001346:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800134a:	601a      	str	r2, [r3, #0]
  return result;
 800134c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001350:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001354:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001356:	fab3 f383 	clz	r3, r3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	4b68      	ldr	r3, [pc, #416]	@ (8001500 <HAL_RCC_OscConfig+0x938>)
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	461a      	mov	r2, r3
 8001366:	2300      	movs	r3, #0
 8001368:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136a:	f7ff f9a5 	bl	80006b8 <HAL_GetTick>
 800136e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001372:	e00a      	b.n	800138a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001374:	f7ff f9a0 	bl	80006b8 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d902      	bls.n	800138a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	f000 bc55 	b.w	8001c34 <HAL_RCC_OscConfig+0x106c>
 800138a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800138e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001392:	2202      	movs	r2, #2
 8001394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800139a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	fa93 f2a3 	rbit	r2, r3
 80013a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013a8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013b6:	2202      	movs	r2, #2
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	fa93 f2a3 	rbit	r2, r3
 80013c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80013da:	2202      	movs	r2, #2
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	fa93 f2a3 	rbit	r2, r3
 80013ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013f0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f6:	4b41      	ldr	r3, [pc, #260]	@ (80014fc <HAL_RCC_OscConfig+0x934>)
 80013f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001402:	2102      	movs	r1, #2
 8001404:	6019      	str	r1, [r3, #0]
 8001406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800140a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	fa93 f1a3 	rbit	r1, r3
 8001414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001418:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800141c:	6019      	str	r1, [r3, #0]
  return result;
 800141e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001422:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f003 031f 	and.w	r3, r3, #31
 8001438:	2101      	movs	r1, #1
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	4013      	ands	r3, r2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d197      	bne.n	8001374 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001448:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 81a1 	beq.w	800179c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001460:	4b26      	ldr	r3, [pc, #152]	@ (80014fc <HAL_RCC_OscConfig+0x934>)
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d116      	bne.n	800149a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146c:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <HAL_RCC_OscConfig+0x934>)
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	4a22      	ldr	r2, [pc, #136]	@ (80014fc <HAL_RCC_OscConfig+0x934>)
 8001472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001476:	61d3      	str	r3, [r2, #28]
 8001478:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <HAL_RCC_OscConfig+0x934>)
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001484:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800148e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001492:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001494:	2301      	movs	r3, #1
 8001496:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149a:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <HAL_RCC_OscConfig+0x93c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d11a      	bne.n	80014dc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a6:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <HAL_RCC_OscConfig+0x93c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a16      	ldr	r2, [pc, #88]	@ (8001504 <HAL_RCC_OscConfig+0x93c>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b2:	f7ff f901 	bl	80006b8 <HAL_GetTick>
 80014b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ba:	e009      	b.n	80014d0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014bc:	f7ff f8fc 	bl	80006b8 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b64      	cmp	r3, #100	@ 0x64
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e3b1      	b.n	8001c34 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <HAL_RCC_OscConfig+0x93c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0ef      	beq.n	80014bc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d10d      	bne.n	8001508 <HAL_RCC_OscConfig+0x940>
 80014ec:	4b03      	ldr	r3, [pc, #12]	@ (80014fc <HAL_RCC_OscConfig+0x934>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4a02      	ldr	r2, [pc, #8]	@ (80014fc <HAL_RCC_OscConfig+0x934>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6213      	str	r3, [r2, #32]
 80014f8:	e03c      	b.n	8001574 <HAL_RCC_OscConfig+0x9ac>
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000
 8001500:	10908120 	.word	0x10908120
 8001504:	40007000 	.word	0x40007000
 8001508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800150c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d10c      	bne.n	8001532 <HAL_RCC_OscConfig+0x96a>
 8001518:	4bc1      	ldr	r3, [pc, #772]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4ac0      	ldr	r2, [pc, #768]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 800151e:	f023 0301 	bic.w	r3, r3, #1
 8001522:	6213      	str	r3, [r2, #32]
 8001524:	4bbe      	ldr	r3, [pc, #760]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4abd      	ldr	r2, [pc, #756]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 800152a:	f023 0304 	bic.w	r3, r3, #4
 800152e:	6213      	str	r3, [r2, #32]
 8001530:	e020      	b.n	8001574 <HAL_RCC_OscConfig+0x9ac>
 8001532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001536:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b05      	cmp	r3, #5
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x994>
 8001542:	4bb7      	ldr	r3, [pc, #732]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4ab6      	ldr	r2, [pc, #728]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	6213      	str	r3, [r2, #32]
 800154e:	4bb4      	ldr	r3, [pc, #720]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4ab3      	ldr	r2, [pc, #716]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6213      	str	r3, [r2, #32]
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0x9ac>
 800155c:	4bb0      	ldr	r3, [pc, #704]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4aaf      	ldr	r2, [pc, #700]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 8001562:	f023 0301 	bic.w	r3, r3, #1
 8001566:	6213      	str	r3, [r2, #32]
 8001568:	4bad      	ldr	r3, [pc, #692]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	4aac      	ldr	r2, [pc, #688]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 800156e:	f023 0304 	bic.w	r3, r3, #4
 8001572:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001578:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 8081 	beq.w	8001688 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001586:	f7ff f897 	bl	80006b8 <HAL_GetTick>
 800158a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001590:	f7ff f892 	bl	80006b8 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e345      	b.n	8001c34 <HAL_RCC_OscConfig+0x106c>
 80015a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015b0:	2202      	movs	r2, #2
 80015b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	fa93 f2a3 	rbit	r2, r3
 80015c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80015d4:	2202      	movs	r2, #2
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015dc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	fa93 f2a3 	rbit	r2, r3
 80015e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80015ee:	601a      	str	r2, [r3, #0]
  return result;
 80015f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80015f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	095b      	lsrs	r3, r3, #5
 8001602:	b2db      	uxtb	r3, r3
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d102      	bne.n	8001614 <HAL_RCC_OscConfig+0xa4c>
 800160e:	4b84      	ldr	r3, [pc, #528]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	e013      	b.n	800163c <HAL_RCC_OscConfig+0xa74>
 8001614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001618:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800161c:	2202      	movs	r2, #2
 800161e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001624:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	fa93 f2a3 	rbit	r2, r3
 800162e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001632:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	4b79      	ldr	r3, [pc, #484]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 800163a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001640:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001644:	2102      	movs	r1, #2
 8001646:	6011      	str	r1, [r2, #0]
 8001648:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800164c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	fa92 f1a2 	rbit	r1, r2
 8001656:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800165a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800165e:	6011      	str	r1, [r2, #0]
  return result;
 8001660:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001664:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	fab2 f282 	clz	r2, r2
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	f002 021f 	and.w	r2, r2, #31
 800167a:	2101      	movs	r1, #1
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	4013      	ands	r3, r2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d084      	beq.n	8001590 <HAL_RCC_OscConfig+0x9c8>
 8001686:	e07f      	b.n	8001788 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001688:	f7ff f816 	bl	80006b8 <HAL_GetTick>
 800168c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001690:	e00b      	b.n	80016aa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001692:	f7ff f811 	bl	80006b8 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e2c4      	b.n	8001c34 <HAL_RCC_OscConfig+0x106c>
 80016aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ae:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80016b2:	2202      	movs	r2, #2
 80016b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ba:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	fa93 f2a3 	rbit	r2, r3
 80016c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80016d6:	2202      	movs	r2, #2
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016de:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	fa93 f2a3 	rbit	r2, r3
 80016e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ec:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80016f0:	601a      	str	r2, [r3, #0]
  return result;
 80016f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80016fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fc:	fab3 f383 	clz	r3, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f043 0302 	orr.w	r3, r3, #2
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d102      	bne.n	8001716 <HAL_RCC_OscConfig+0xb4e>
 8001710:	4b43      	ldr	r3, [pc, #268]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	e013      	b.n	800173e <HAL_RCC_OscConfig+0xb76>
 8001716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800171a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800171e:	2202      	movs	r2, #2
 8001720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001726:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	fa93 f2a3 	rbit	r2, r3
 8001730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001734:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	4b39      	ldr	r3, [pc, #228]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 800173c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001742:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001746:	2102      	movs	r1, #2
 8001748:	6011      	str	r1, [r2, #0]
 800174a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800174e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	fa92 f1a2 	rbit	r1, r2
 8001758:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800175c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001760:	6011      	str	r1, [r2, #0]
  return result;
 8001762:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001766:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	fab2 f282 	clz	r2, r2
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	f002 021f 	and.w	r2, r2, #31
 800177c:	2101      	movs	r1, #1
 800177e:	fa01 f202 	lsl.w	r2, r1, r2
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d184      	bne.n	8001692 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001788:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800178c:	2b01      	cmp	r3, #1
 800178e:	d105      	bne.n	800179c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001790:	4b23      	ldr	r3, [pc, #140]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	4a22      	ldr	r2, [pc, #136]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 8001796:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800179a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800179c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 8242 	beq.w	8001c32 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <HAL_RCC_OscConfig+0xc58>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	f000 8213 	beq.w	8001be2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	f040 8162 	bne.w	8001a92 <HAL_RCC_OscConfig+0xeca>
 80017ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80017d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	fa93 f2a3 	rbit	r2, r3
 80017ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ee:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80017f2:	601a      	str	r2, [r3, #0]
  return result;
 80017f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80017fc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001808:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	461a      	mov	r2, r3
 8001810:	2300      	movs	r3, #0
 8001812:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7fe ff50 	bl	80006b8 <HAL_GetTick>
 8001818:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181c:	e00c      	b.n	8001838 <HAL_RCC_OscConfig+0xc70>
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001824:	f7fe ff48 	bl	80006b8 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e1fd      	b.n	8001c34 <HAL_RCC_OscConfig+0x106c>
 8001838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800183c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001840:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800184a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	fa93 f2a3 	rbit	r2, r3
 8001854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001858:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800185c:	601a      	str	r2, [r3, #0]
  return result;
 800185e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001862:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001866:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b01      	cmp	r3, #1
 800187a:	d102      	bne.n	8001882 <HAL_RCC_OscConfig+0xcba>
 800187c:	4bb0      	ldr	r3, [pc, #704]	@ (8001b40 <HAL_RCC_OscConfig+0xf78>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	e027      	b.n	80018d2 <HAL_RCC_OscConfig+0xd0a>
 8001882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001886:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800188a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800188e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001894:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	fa93 f2a3 	rbit	r2, r3
 800189e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ac:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80018b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ba:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	fa93 f2a3 	rbit	r2, r3
 80018c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	4b9c      	ldr	r3, [pc, #624]	@ (8001b40 <HAL_RCC_OscConfig+0xf78>)
 80018d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018d6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80018da:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80018de:	6011      	str	r1, [r2, #0]
 80018e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018e4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80018e8:	6812      	ldr	r2, [r2, #0]
 80018ea:	fa92 f1a2 	rbit	r1, r2
 80018ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018f2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80018f6:	6011      	str	r1, [r2, #0]
  return result;
 80018f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018fc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	fab2 f282 	clz	r2, r2
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	f042 0220 	orr.w	r2, r2, #32
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	f002 021f 	and.w	r2, r2, #31
 8001912:	2101      	movs	r1, #1
 8001914:	fa01 f202 	lsl.w	r2, r1, r2
 8001918:	4013      	ands	r3, r2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d182      	bne.n	8001824 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800191e:	4b88      	ldr	r3, [pc, #544]	@ (8001b40 <HAL_RCC_OscConfig+0xf78>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001936:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	430b      	orrs	r3, r1
 8001940:	497f      	ldr	r1, [pc, #508]	@ (8001b40 <HAL_RCC_OscConfig+0xf78>)
 8001942:	4313      	orrs	r3, r2
 8001944:	604b      	str	r3, [r1, #4]
 8001946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800194a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800194e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001958:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	fa93 f2a3 	rbit	r2, r3
 8001962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001966:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800196a:	601a      	str	r2, [r3, #0]
  return result;
 800196c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001970:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001974:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001976:	fab3 f383 	clz	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001980:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	461a      	mov	r2, r3
 8001988:	2301      	movs	r3, #1
 800198a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7fe fe94 	bl	80006b8 <HAL_GetTick>
 8001990:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001994:	e009      	b.n	80019aa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001996:	f7fe fe8f 	bl	80006b8 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e144      	b.n	8001c34 <HAL_RCC_OscConfig+0x106c>
 80019aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ae:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80019b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019bc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	fa93 f2a3 	rbit	r2, r3
 80019c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ca:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80019ce:	601a      	str	r2, [r3, #0]
  return result;
 80019d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80019d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	095b      	lsrs	r3, r3, #5
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d102      	bne.n	80019f4 <HAL_RCC_OscConfig+0xe2c>
 80019ee:	4b54      	ldr	r3, [pc, #336]	@ (8001b40 <HAL_RCC_OscConfig+0xf78>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	e027      	b.n	8001a44 <HAL_RCC_OscConfig+0xe7c>
 80019f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80019fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a06:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	fa93 f2a3 	rbit	r2, r3
 8001a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a14:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a1e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001a22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	fa93 f2a3 	rbit	r2, r3
 8001a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	4b3f      	ldr	r3, [pc, #252]	@ (8001b40 <HAL_RCC_OscConfig+0xf78>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a48:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001a4c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a50:	6011      	str	r1, [r2, #0]
 8001a52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a56:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	fa92 f1a2 	rbit	r1, r2
 8001a60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a64:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001a68:	6011      	str	r1, [r2, #0]
  return result;
 8001a6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a6e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	fab2 f282 	clz	r2, r2
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	f042 0220 	orr.w	r2, r2, #32
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	f002 021f 	and.w	r2, r2, #31
 8001a84:	2101      	movs	r1, #1
 8001a86:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d082      	beq.n	8001996 <HAL_RCC_OscConfig+0xdce>
 8001a90:	e0cf      	b.n	8001c32 <HAL_RCC_OscConfig+0x106a>
 8001a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a96:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001a9a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	fa93 f2a3 	rbit	r2, r3
 8001aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001ab6:	601a      	str	r2, [r3, #0]
  return result;
 8001ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001abc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001ac0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001acc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7fe fdee 	bl	80006b8 <HAL_GetTick>
 8001adc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae0:	e009      	b.n	8001af6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7fe fde9 	bl	80006b8 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e09e      	b.n	8001c34 <HAL_RCC_OscConfig+0x106c>
 8001af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afa:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001afe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b08:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	fa93 f2a3 	rbit	r2, r3
 8001b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b16:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b1a:	601a      	str	r2, [r3, #0]
  return result;
 8001b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b20:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	095b      	lsrs	r3, r3, #5
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d104      	bne.n	8001b44 <HAL_RCC_OscConfig+0xf7c>
 8001b3a:	4b01      	ldr	r3, [pc, #4]	@ (8001b40 <HAL_RCC_OscConfig+0xf78>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	e029      	b.n	8001b94 <HAL_RCC_OscConfig+0xfcc>
 8001b40:	40021000 	.word	0x40021000
 8001b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b48:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b56:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	fa93 f2a3 	rbit	r2, r3
 8001b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b64:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b6e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001b72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	fa93 f2a3 	rbit	r2, r3
 8001b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	4b2b      	ldr	r3, [pc, #172]	@ (8001c40 <HAL_RCC_OscConfig+0x1078>)
 8001b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b98:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001b9c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ba0:	6011      	str	r1, [r2, #0]
 8001ba2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ba6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	fa92 f1a2 	rbit	r1, r2
 8001bb0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bb4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001bb8:	6011      	str	r1, [r2, #0]
  return result;
 8001bba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bbe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	fab2 f282 	clz	r2, r2
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	f042 0220 	orr.w	r2, r2, #32
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	f002 021f 	and.w	r2, r2, #31
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d180      	bne.n	8001ae2 <HAL_RCC_OscConfig+0xf1a>
 8001be0:	e027      	b.n	8001c32 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e01e      	b.n	8001c34 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bf6:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <HAL_RCC_OscConfig+0x1078>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bfe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001c02:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d10b      	bne.n	8001c2e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001c16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001c1a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000

08001c44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b09e      	sub	sp, #120	@ 0x78
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e162      	b.n	8001f22 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b90      	ldr	r3, [pc, #576]	@ (8001ea0 <HAL_RCC_ClockConfig+0x25c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d910      	bls.n	8001c8c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b8d      	ldr	r3, [pc, #564]	@ (8001ea0 <HAL_RCC_ClockConfig+0x25c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 0207 	bic.w	r2, r3, #7
 8001c72:	498b      	ldr	r1, [pc, #556]	@ (8001ea0 <HAL_RCC_ClockConfig+0x25c>)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b89      	ldr	r3, [pc, #548]	@ (8001ea0 <HAL_RCC_ClockConfig+0x25c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e14a      	b.n	8001f22 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b82      	ldr	r3, [pc, #520]	@ (8001ea4 <HAL_RCC_ClockConfig+0x260>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	497f      	ldr	r1, [pc, #508]	@ (8001ea4 <HAL_RCC_ClockConfig+0x260>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80dc 	beq.w	8001e70 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d13c      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xf6>
 8001cc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cc4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001cce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd0:	fab3 f383 	clz	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d102      	bne.n	8001cea <HAL_RCC_ClockConfig+0xa6>
 8001ce4:	4b6f      	ldr	r3, [pc, #444]	@ (8001ea4 <HAL_RCC_ClockConfig+0x260>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	e00f      	b.n	8001d0a <HAL_RCC_ClockConfig+0xc6>
 8001cea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	667b      	str	r3, [r7, #100]	@ 0x64
 8001cf8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8001cfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d06:	4b67      	ldr	r3, [pc, #412]	@ (8001ea4 <HAL_RCC_ClockConfig+0x260>)
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d0e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001d10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001d12:	fa92 f2a2 	rbit	r2, r2
 8001d16:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001d18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d1a:	fab2 f282 	clz	r2, r2
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	f042 0220 	orr.w	r2, r2, #32
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	f002 021f 	and.w	r2, r2, #31
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d17b      	bne.n	8001e2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e0f3      	b.n	8001f22 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d13c      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x178>
 8001d42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d46:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001d50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	095b      	lsrs	r3, r3, #5
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d102      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x128>
 8001d66:	4b4f      	ldr	r3, [pc, #316]	@ (8001ea4 <HAL_RCC_ClockConfig+0x260>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	e00f      	b.n	8001d8c <HAL_RCC_ClockConfig+0x148>
 8001d6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d74:	fa93 f3a3 	rbit	r3, r3
 8001d78:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d88:	4b46      	ldr	r3, [pc, #280]	@ (8001ea4 <HAL_RCC_ClockConfig+0x260>)
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d90:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001d92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d94:	fa92 f2a2 	rbit	r2, r2
 8001d98:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001d9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d9c:	fab2 f282 	clz	r2, r2
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	f042 0220 	orr.w	r2, r2, #32
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	f002 021f 	and.w	r2, r2, #31
 8001dac:	2101      	movs	r1, #1
 8001dae:	fa01 f202 	lsl.w	r2, r1, r2
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d13a      	bne.n	8001e2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0b2      	b.n	8001f22 <HAL_RCC_ClockConfig+0x2de>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc2:	fa93 f3a3 	rbit	r3, r3
 8001dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	095b      	lsrs	r3, r3, #5
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d102      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x1a0>
 8001dde:	4b31      	ldr	r3, [pc, #196]	@ (8001ea4 <HAL_RCC_ClockConfig+0x260>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	e00d      	b.n	8001e00 <HAL_RCC_ClockConfig+0x1bc>
 8001de4:	2302      	movs	r3, #2
 8001de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001df0:	2302      	movs	r3, #2
 8001df2:	623b      	str	r3, [r7, #32]
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	4b29      	ldr	r3, [pc, #164]	@ (8001ea4 <HAL_RCC_ClockConfig+0x260>)
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e00:	2202      	movs	r2, #2
 8001e02:	61ba      	str	r2, [r7, #24]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	fa92 f2a2 	rbit	r2, r2
 8001e0a:	617a      	str	r2, [r7, #20]
  return result;
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	fab2 f282 	clz	r2, r2
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	f042 0220 	orr.w	r2, r2, #32
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	f002 021f 	and.w	r2, r2, #31
 8001e1e:	2101      	movs	r1, #1
 8001e20:	fa01 f202 	lsl.w	r2, r1, r2
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e079      	b.n	8001f22 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea4 <HAL_RCC_ClockConfig+0x260>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f023 0203 	bic.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	491a      	ldr	r1, [pc, #104]	@ (8001ea4 <HAL_RCC_ClockConfig+0x260>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e40:	f7fe fc3a 	bl	80006b8 <HAL_GetTick>
 8001e44:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7fe fc36 	bl	80006b8 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e061      	b.n	8001f22 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <HAL_RCC_ClockConfig+0x260>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 020c 	and.w	r2, r3, #12
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1eb      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea0 <HAL_RCC_ClockConfig+0x25c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d214      	bcs.n	8001ea8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <HAL_RCC_ClockConfig+0x25c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 0207 	bic.w	r2, r3, #7
 8001e86:	4906      	ldr	r1, [pc, #24]	@ (8001ea0 <HAL_RCC_ClockConfig+0x25c>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ea0 <HAL_RCC_ClockConfig+0x25c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d005      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e040      	b.n	8001f22 <HAL_RCC_ClockConfig+0x2de>
 8001ea0:	40022000 	.word	0x40022000
 8001ea4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f2c <HAL_RCC_ClockConfig+0x2e8>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	491a      	ldr	r1, [pc, #104]	@ (8001f2c <HAL_RCC_ClockConfig+0x2e8>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ed2:	4b16      	ldr	r3, [pc, #88]	@ (8001f2c <HAL_RCC_ClockConfig+0x2e8>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4912      	ldr	r1, [pc, #72]	@ (8001f2c <HAL_RCC_ClockConfig+0x2e8>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ee6:	f000 f829 	bl	8001f3c <HAL_RCC_GetSysClockFreq>
 8001eea:	4601      	mov	r1, r0
 8001eec:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <HAL_RCC_ClockConfig+0x2e8>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ef4:	22f0      	movs	r2, #240	@ 0xf0
 8001ef6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	fa92 f2a2 	rbit	r2, r2
 8001efe:	60fa      	str	r2, [r7, #12]
  return result;
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	fab2 f282 	clz	r2, r2
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	40d3      	lsrs	r3, r2
 8001f0a:	4a09      	ldr	r2, [pc, #36]	@ (8001f30 <HAL_RCC_ClockConfig+0x2ec>)
 8001f0c:	5cd3      	ldrb	r3, [r2, r3]
 8001f0e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f12:	4a08      	ldr	r2, [pc, #32]	@ (8001f34 <HAL_RCC_ClockConfig+0x2f0>)
 8001f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f16:	4b08      	ldr	r3, [pc, #32]	@ (8001f38 <HAL_RCC_ClockConfig+0x2f4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fb88 	bl	8000630 <HAL_InitTick>
  
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3778      	adds	r7, #120	@ 0x78
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	08002e08 	.word	0x08002e08
 8001f34:	20000004 	.word	0x20000004
 8001f38:	20000008 	.word	0x20000008

08001f3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001f56:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d002      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x30>
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d003      	beq.n	8001f72 <HAL_RCC_GetSysClockFreq+0x36>
 8001f6a:	e026      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f6c:	4b19      	ldr	r3, [pc, #100]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f6e:	613b      	str	r3, [r7, #16]
      break;
 8001f70:	e026      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	0c9b      	lsrs	r3, r3, #18
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	4a17      	ldr	r2, [pc, #92]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f7c:	5cd3      	ldrb	r3, [r2, r3]
 8001f7e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001f80:	4b13      	ldr	r3, [pc, #76]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	4a14      	ldr	r2, [pc, #80]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f8a:	5cd3      	ldrb	r3, [r2, r3]
 8001f8c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f98:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	e004      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a0c      	ldr	r2, [pc, #48]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	613b      	str	r3, [r7, #16]
      break;
 8001fb8:	e002      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fbc:	613b      	str	r3, [r7, #16]
      break;
 8001fbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc0:	693b      	ldr	r3, [r7, #16]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	371c      	adds	r7, #28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	007a1200 	.word	0x007a1200
 8001fd8:	08002e20 	.word	0x08002e20
 8001fdc:	08002e30 	.word	0x08002e30
 8001fe0:	003d0900 	.word	0x003d0900

08001fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe8:	4b03      	ldr	r3, [pc, #12]	@ (8001ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000004 	.word	0x20000004

08001ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002002:	f7ff ffef 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
 8002006:	4601      	mov	r1, r0
 8002008:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002010:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002014:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	fa92 f2a2 	rbit	r2, r2
 800201c:	603a      	str	r2, [r7, #0]
  return result;
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	fab2 f282 	clz	r2, r2
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	40d3      	lsrs	r3, r2
 8002028:	4a04      	ldr	r2, [pc, #16]	@ (800203c <HAL_RCC_GetPCLK1Freq+0x40>)
 800202a:	5cd3      	ldrb	r3, [r2, r3]
 800202c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	08002e18 	.word	0x08002e18

08002040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002046:	f7ff ffcd 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
 800204a:	4601      	mov	r1, r0
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002054:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002058:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	fa92 f2a2 	rbit	r2, r2
 8002060:	603a      	str	r2, [r7, #0]
  return result;
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	fab2 f282 	clz	r2, r2
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	40d3      	lsrs	r3, r2
 800206c:	4a04      	ldr	r2, [pc, #16]	@ (8002080 <HAL_RCC_GetPCLK2Freq+0x40>)
 800206e:	5cd3      	ldrb	r3, [r2, r3]
 8002070:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40021000 	.word	0x40021000
 8002080:	08002e18 	.word	0x08002e18

08002084 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b092      	sub	sp, #72	@ 0x48
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002094:	2300      	movs	r3, #0
 8002096:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 80d4 	beq.w	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a8:	4b4e      	ldr	r3, [pc, #312]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10e      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b4:	4b4b      	ldr	r3, [pc, #300]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	4a4a      	ldr	r2, [pc, #296]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020be:	61d3      	str	r3, [r2, #28]
 80020c0:	4b48      	ldr	r3, [pc, #288]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020cc:	2301      	movs	r3, #1
 80020ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d2:	4b45      	ldr	r3, [pc, #276]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d118      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020de:	4b42      	ldr	r3, [pc, #264]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a41      	ldr	r2, [pc, #260]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ea:	f7fe fae5 	bl	80006b8 <HAL_GetTick>
 80020ee:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	e008      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f2:	f7fe fae1 	bl	80006b8 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b64      	cmp	r3, #100	@ 0x64
 80020fe:	d901      	bls.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e14b      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	4b38      	ldr	r3, [pc, #224]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002110:	4b34      	ldr	r3, [pc, #208]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002118:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800211a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 8084 	beq.w	800222a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800212a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800212c:	429a      	cmp	r2, r3
 800212e:	d07c      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002130:	4b2c      	ldr	r3, [pc, #176]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002138:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800213a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800213e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	4b26      	ldr	r3, [pc, #152]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	461a      	mov	r2, r3
 800215a:	2301      	movs	r3, #1
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002162:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800216c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	4b1d      	ldr	r3, [pc, #116]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	461a      	mov	r2, r3
 800217e:	2300      	movs	r3, #0
 8002180:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002182:	4a18      	ldr	r2, [pc, #96]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002186:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d04b      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002192:	f7fe fa91 	bl	80006b8 <HAL_GetTick>
 8002196:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002198:	e00a      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219a:	f7fe fa8d 	bl	80006b8 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e0f5      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x318>
 80021b0:	2302      	movs	r3, #2
 80021b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b6:	fa93 f3a3 	rbit	r3, r3
 80021ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80021bc:	2302      	movs	r3, #2
 80021be:	623b      	str	r3, [r7, #32]
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	61fb      	str	r3, [r7, #28]
  return result;
 80021c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	095b      	lsrs	r3, r3, #5
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d108      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80021de:	4b01      	ldr	r3, [pc, #4]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	e00d      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40007000 	.word	0x40007000
 80021ec:	10908100 	.word	0x10908100
 80021f0:	2302      	movs	r3, #2
 80021f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	4b69      	ldr	r3, [pc, #420]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80021fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002200:	2202      	movs	r2, #2
 8002202:	613a      	str	r2, [r7, #16]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	fa92 f2a2 	rbit	r2, r2
 800220a:	60fa      	str	r2, [r7, #12]
  return result;
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	fab2 f282 	clz	r2, r2
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	f002 021f 	and.w	r2, r2, #31
 800221e:	2101      	movs	r1, #1
 8002220:	fa01 f202 	lsl.w	r2, r1, r2
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0b7      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800222a:	4b5e      	ldr	r3, [pc, #376]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	495b      	ldr	r1, [pc, #364]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002238:	4313      	orrs	r3, r2
 800223a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800223c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002240:	2b01      	cmp	r3, #1
 8002242:	d105      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002244:	4b57      	ldr	r3, [pc, #348]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	4a56      	ldr	r2, [pc, #344]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800224a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800224e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800225c:	4b51      	ldr	r3, [pc, #324]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002260:	f023 0203 	bic.w	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	494e      	ldr	r1, [pc, #312]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800226a:	4313      	orrs	r3, r2
 800226c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b00      	cmp	r3, #0
 8002278:	d008      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800227a:	4b4a      	ldr	r3, [pc, #296]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f023 0210 	bic.w	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	4947      	ldr	r1, [pc, #284]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002288:	4313      	orrs	r3, r2
 800228a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002298:	4b42      	ldr	r3, [pc, #264]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a4:	493f      	ldr	r1, [pc, #252]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022b6:	4b3b      	ldr	r3, [pc, #236]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	f023 0220 	bic.w	r2, r3, #32
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	4938      	ldr	r1, [pc, #224]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022d4:	4b33      	ldr	r3, [pc, #204]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	4930      	ldr	r1, [pc, #192]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d008      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022f2:	4b2c      	ldr	r3, [pc, #176]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	4929      	ldr	r1, [pc, #164]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002310:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002314:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4921      	ldr	r1, [pc, #132]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800231e:	4313      	orrs	r3, r2
 8002320:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800232e:	4b1d      	ldr	r3, [pc, #116]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	491a      	ldr	r1, [pc, #104]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800233c:	4313      	orrs	r3, r2
 800233e:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800234c:	4b15      	ldr	r3, [pc, #84]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002350:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002358:	4912      	ldr	r1, [pc, #72]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800235a:	4313      	orrs	r3, r2
 800235c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d008      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800236a:	4b0e      	ldr	r3, [pc, #56]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002376:	490b      	ldr	r1, [pc, #44]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002378:	4313      	orrs	r3, r2
 800237a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002388:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002394:	4903      	ldr	r1, [pc, #12]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002396:	4313      	orrs	r3, r2
 8002398:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3748      	adds	r7, #72	@ 0x48
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40021000 	.word	0x40021000

080023a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e040      	b.n	800243c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7fe f83a 	bl	8000444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2224      	movs	r2, #36	@ 0x24
 80023d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0201 	bic.w	r2, r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fab0 	bl	8002954 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f977 	bl	80026e8 <UART_SetConfig>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e01b      	b.n	800243c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 fb2f 	bl	8002a98 <UART_CheckIdleState>
 800243a:	4603      	mov	r3, r0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	@ 0x28
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	4613      	mov	r3, r2
 8002452:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002458:	2b20      	cmp	r3, #32
 800245a:	d177      	bne.n	800254c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <HAL_UART_Transmit+0x24>
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e070      	b.n	800254e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2221      	movs	r2, #33	@ 0x21
 8002478:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800247a:	f7fe f91d 	bl	80006b8 <HAL_GetTick>
 800247e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	88fa      	ldrh	r2, [r7, #6]
 8002484:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	88fa      	ldrh	r2, [r7, #6]
 800248c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002498:	d108      	bne.n	80024ac <HAL_UART_Transmit+0x68>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d104      	bne.n	80024ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	e003      	b.n	80024b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024b4:	e02f      	b.n	8002516 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2200      	movs	r2, #0
 80024be:	2180      	movs	r1, #128	@ 0x80
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 fb91 	bl	8002be8 <UART_WaitOnFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d004      	beq.n	80024d6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2220      	movs	r2, #32
 80024d0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e03b      	b.n	800254e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10b      	bne.n	80024f4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	881a      	ldrh	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024e8:	b292      	uxth	r2, r2
 80024ea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	3302      	adds	r3, #2
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	e007      	b.n	8002504 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	781a      	ldrb	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3301      	adds	r3, #1
 8002502:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1c9      	bne.n	80024b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2200      	movs	r2, #0
 800252a:	2140      	movs	r1, #64	@ 0x40
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 fb5b 	bl	8002be8 <UART_WaitOnFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d004      	beq.n	8002542 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e005      	b.n	800254e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2220      	movs	r2, #32
 8002546:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	e000      	b.n	800254e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800254c:	2302      	movs	r3, #2
  }
}
 800254e:	4618      	mov	r0, r3
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b08a      	sub	sp, #40	@ 0x28
 800255a:	af02      	add	r7, sp, #8
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	4613      	mov	r3, r2
 8002564:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800256c:	2b20      	cmp	r3, #32
 800256e:	f040 80b6 	bne.w	80026de <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_UART_Receive+0x28>
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e0ae      	b.n	80026e0 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2222      	movs	r2, #34	@ 0x22
 800258e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002598:	f7fe f88e 	bl	80006b8 <HAL_GetTick>
 800259c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	88fa      	ldrh	r2, [r7, #6]
 80025a2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	88fa      	ldrh	r2, [r7, #6]
 80025aa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025b6:	d10e      	bne.n	80025d6 <HAL_UART_Receive+0x80>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d105      	bne.n	80025cc <HAL_UART_Receive+0x76>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80025c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80025ca:	e02d      	b.n	8002628 <HAL_UART_Receive+0xd2>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	22ff      	movs	r2, #255	@ 0xff
 80025d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80025d4:	e028      	b.n	8002628 <HAL_UART_Receive+0xd2>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10d      	bne.n	80025fa <HAL_UART_Receive+0xa4>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d104      	bne.n	80025f0 <HAL_UART_Receive+0x9a>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	22ff      	movs	r2, #255	@ 0xff
 80025ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80025ee:	e01b      	b.n	8002628 <HAL_UART_Receive+0xd2>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	227f      	movs	r2, #127	@ 0x7f
 80025f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80025f8:	e016      	b.n	8002628 <HAL_UART_Receive+0xd2>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002602:	d10d      	bne.n	8002620 <HAL_UART_Receive+0xca>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d104      	bne.n	8002616 <HAL_UART_Receive+0xc0>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	227f      	movs	r2, #127	@ 0x7f
 8002610:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002614:	e008      	b.n	8002628 <HAL_UART_Receive+0xd2>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	223f      	movs	r2, #63	@ 0x3f
 800261a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800261e:	e003      	b.n	8002628 <HAL_UART_Receive+0xd2>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800262e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002638:	d108      	bne.n	800264c <HAL_UART_Receive+0xf6>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d104      	bne.n	800264c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	61bb      	str	r3, [r7, #24]
 800264a:	e003      	b.n	8002654 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002650:	2300      	movs	r3, #0
 8002652:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002654:	e037      	b.n	80026c6 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2200      	movs	r2, #0
 800265e:	2120      	movs	r1, #32
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 fac1 	bl	8002be8 <UART_WaitOnFlagUntilTimeout>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2220      	movs	r2, #32
 8002670:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e033      	b.n	80026e0 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10c      	bne.n	8002698 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002684:	b29a      	uxth	r2, r3
 8002686:	8a7b      	ldrh	r3, [r7, #18]
 8002688:	4013      	ands	r3, r2
 800268a:	b29a      	uxth	r2, r3
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	3302      	adds	r3, #2
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	e00d      	b.n	80026b4 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800269e:	b29b      	uxth	r3, r3
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	8a7b      	ldrh	r3, [r7, #18]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	4013      	ands	r3, r2
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3301      	adds	r3, #1
 80026b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1c1      	bne.n	8002656 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e000      	b.n	80026e0 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80026de:	2302      	movs	r3, #2
  }
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3720      	adds	r7, #32
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4b8a      	ldr	r3, [pc, #552]	@ (800293c <UART_SetConfig+0x254>)
 8002714:	4013      	ands	r3, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	6979      	ldr	r1, [r7, #20]
 800271c:	430b      	orrs	r3, r1
 800271e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	4313      	orrs	r3, r2
 8002744:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	430a      	orrs	r2, r1
 8002758:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a78      	ldr	r2, [pc, #480]	@ (8002940 <UART_SetConfig+0x258>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d120      	bne.n	80027a6 <UART_SetConfig+0xbe>
 8002764:	4b77      	ldr	r3, [pc, #476]	@ (8002944 <UART_SetConfig+0x25c>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b03      	cmp	r3, #3
 800276e:	d817      	bhi.n	80027a0 <UART_SetConfig+0xb8>
 8002770:	a201      	add	r2, pc, #4	@ (adr r2, 8002778 <UART_SetConfig+0x90>)
 8002772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002776:	bf00      	nop
 8002778:	08002789 	.word	0x08002789
 800277c:	08002795 	.word	0x08002795
 8002780:	0800279b 	.word	0x0800279b
 8002784:	0800278f 	.word	0x0800278f
 8002788:	2300      	movs	r3, #0
 800278a:	77fb      	strb	r3, [r7, #31]
 800278c:	e01d      	b.n	80027ca <UART_SetConfig+0xe2>
 800278e:	2302      	movs	r3, #2
 8002790:	77fb      	strb	r3, [r7, #31]
 8002792:	e01a      	b.n	80027ca <UART_SetConfig+0xe2>
 8002794:	2304      	movs	r3, #4
 8002796:	77fb      	strb	r3, [r7, #31]
 8002798:	e017      	b.n	80027ca <UART_SetConfig+0xe2>
 800279a:	2308      	movs	r3, #8
 800279c:	77fb      	strb	r3, [r7, #31]
 800279e:	e014      	b.n	80027ca <UART_SetConfig+0xe2>
 80027a0:	2310      	movs	r3, #16
 80027a2:	77fb      	strb	r3, [r7, #31]
 80027a4:	e011      	b.n	80027ca <UART_SetConfig+0xe2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a67      	ldr	r2, [pc, #412]	@ (8002948 <UART_SetConfig+0x260>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d102      	bne.n	80027b6 <UART_SetConfig+0xce>
 80027b0:	2300      	movs	r3, #0
 80027b2:	77fb      	strb	r3, [r7, #31]
 80027b4:	e009      	b.n	80027ca <UART_SetConfig+0xe2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a64      	ldr	r2, [pc, #400]	@ (800294c <UART_SetConfig+0x264>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d102      	bne.n	80027c6 <UART_SetConfig+0xde>
 80027c0:	2300      	movs	r3, #0
 80027c2:	77fb      	strb	r3, [r7, #31]
 80027c4:	e001      	b.n	80027ca <UART_SetConfig+0xe2>
 80027c6:	2310      	movs	r3, #16
 80027c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027d2:	d15a      	bne.n	800288a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80027d4:	7ffb      	ldrb	r3, [r7, #31]
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d827      	bhi.n	800282a <UART_SetConfig+0x142>
 80027da:	a201      	add	r2, pc, #4	@ (adr r2, 80027e0 <UART_SetConfig+0xf8>)
 80027dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e0:	08002805 	.word	0x08002805
 80027e4:	0800280d 	.word	0x0800280d
 80027e8:	08002815 	.word	0x08002815
 80027ec:	0800282b 	.word	0x0800282b
 80027f0:	0800281b 	.word	0x0800281b
 80027f4:	0800282b 	.word	0x0800282b
 80027f8:	0800282b 	.word	0x0800282b
 80027fc:	0800282b 	.word	0x0800282b
 8002800:	08002823 	.word	0x08002823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002804:	f7ff fbfa 	bl	8001ffc <HAL_RCC_GetPCLK1Freq>
 8002808:	61b8      	str	r0, [r7, #24]
        break;
 800280a:	e013      	b.n	8002834 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800280c:	f7ff fc18 	bl	8002040 <HAL_RCC_GetPCLK2Freq>
 8002810:	61b8      	str	r0, [r7, #24]
        break;
 8002812:	e00f      	b.n	8002834 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002814:	4b4e      	ldr	r3, [pc, #312]	@ (8002950 <UART_SetConfig+0x268>)
 8002816:	61bb      	str	r3, [r7, #24]
        break;
 8002818:	e00c      	b.n	8002834 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800281a:	f7ff fb8f 	bl	8001f3c <HAL_RCC_GetSysClockFreq>
 800281e:	61b8      	str	r0, [r7, #24]
        break;
 8002820:	e008      	b.n	8002834 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002826:	61bb      	str	r3, [r7, #24]
        break;
 8002828:	e004      	b.n	8002834 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	77bb      	strb	r3, [r7, #30]
        break;
 8002832:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d074      	beq.n	8002924 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	005a      	lsls	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	085b      	lsrs	r3, r3, #1
 8002844:	441a      	add	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	fbb2 f3f3 	udiv	r3, r2, r3
 800284e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b0f      	cmp	r3, #15
 8002854:	d916      	bls.n	8002884 <UART_SetConfig+0x19c>
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800285c:	d212      	bcs.n	8002884 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	b29b      	uxth	r3, r3
 8002862:	f023 030f 	bic.w	r3, r3, #15
 8002866:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	085b      	lsrs	r3, r3, #1
 800286c:	b29b      	uxth	r3, r3
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	b29a      	uxth	r2, r3
 8002874:	89fb      	ldrh	r3, [r7, #14]
 8002876:	4313      	orrs	r3, r2
 8002878:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	89fa      	ldrh	r2, [r7, #14]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	e04f      	b.n	8002924 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	77bb      	strb	r3, [r7, #30]
 8002888:	e04c      	b.n	8002924 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800288a:	7ffb      	ldrb	r3, [r7, #31]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d828      	bhi.n	80028e2 <UART_SetConfig+0x1fa>
 8002890:	a201      	add	r2, pc, #4	@ (adr r2, 8002898 <UART_SetConfig+0x1b0>)
 8002892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002896:	bf00      	nop
 8002898:	080028bd 	.word	0x080028bd
 800289c:	080028c5 	.word	0x080028c5
 80028a0:	080028cd 	.word	0x080028cd
 80028a4:	080028e3 	.word	0x080028e3
 80028a8:	080028d3 	.word	0x080028d3
 80028ac:	080028e3 	.word	0x080028e3
 80028b0:	080028e3 	.word	0x080028e3
 80028b4:	080028e3 	.word	0x080028e3
 80028b8:	080028db 	.word	0x080028db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028bc:	f7ff fb9e 	bl	8001ffc <HAL_RCC_GetPCLK1Freq>
 80028c0:	61b8      	str	r0, [r7, #24]
        break;
 80028c2:	e013      	b.n	80028ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028c4:	f7ff fbbc 	bl	8002040 <HAL_RCC_GetPCLK2Freq>
 80028c8:	61b8      	str	r0, [r7, #24]
        break;
 80028ca:	e00f      	b.n	80028ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028cc:	4b20      	ldr	r3, [pc, #128]	@ (8002950 <UART_SetConfig+0x268>)
 80028ce:	61bb      	str	r3, [r7, #24]
        break;
 80028d0:	e00c      	b.n	80028ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028d2:	f7ff fb33 	bl	8001f3c <HAL_RCC_GetSysClockFreq>
 80028d6:	61b8      	str	r0, [r7, #24]
        break;
 80028d8:	e008      	b.n	80028ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028de:	61bb      	str	r3, [r7, #24]
        break;
 80028e0:	e004      	b.n	80028ec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	77bb      	strb	r3, [r7, #30]
        break;
 80028ea:	bf00      	nop
    }

    if (pclk != 0U)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d018      	beq.n	8002924 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	085a      	lsrs	r2, r3, #1
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	441a      	add	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b0f      	cmp	r3, #15
 800290a:	d909      	bls.n	8002920 <UART_SetConfig+0x238>
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002912:	d205      	bcs.n	8002920 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	b29a      	uxth	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	e001      	b.n	8002924 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002930:	7fbb      	ldrb	r3, [r7, #30]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3720      	adds	r7, #32
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	efff69f3 	.word	0xefff69f3
 8002940:	40013800 	.word	0x40013800
 8002944:	40021000 	.word	0x40021000
 8002948:	40004400 	.word	0x40004400
 800294c:	40004800 	.word	0x40004800
 8002950:	007a1200 	.word	0x007a1200

08002954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01a      	beq.n	8002a6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a52:	d10a      	bne.n	8002a6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	605a      	str	r2, [r3, #4]
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b098      	sub	sp, #96	@ 0x60
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002aa8:	f7fd fe06 	bl	80006b8 <HAL_GetTick>
 8002aac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d12e      	bne.n	8002b1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002abc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f88c 	bl	8002be8 <UART_WaitOnFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d021      	beq.n	8002b1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ade:	e853 3f00 	ldrex	r3, [r3]
 8002ae2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002aea:	653b      	str	r3, [r7, #80]	@ 0x50
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002af6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002afa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002afc:	e841 2300 	strex	r3, r2, [r1]
 8002b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1e6      	bne.n	8002ad6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e062      	b.n	8002be0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d149      	bne.n	8002bbc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b30:	2200      	movs	r2, #0
 8002b32:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f856 	bl	8002be8 <UART_WaitOnFlagUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d03c      	beq.n	8002bbc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4a:	e853 3f00 	ldrex	r3, [r3]
 8002b4e:	623b      	str	r3, [r7, #32]
   return(result);
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b60:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b62:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b68:	e841 2300 	strex	r3, r2, [r1]
 8002b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e6      	bne.n	8002b42 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3308      	adds	r3, #8
 8002b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	e853 3f00 	ldrex	r3, [r3]
 8002b82:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3308      	adds	r3, #8
 8002b92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b94:	61fa      	str	r2, [r7, #28]
 8002b96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b98:	69b9      	ldr	r1, [r7, #24]
 8002b9a:	69fa      	ldr	r2, [r7, #28]
 8002b9c:	e841 2300 	strex	r3, r2, [r1]
 8002ba0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e5      	bne.n	8002b74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e011      	b.n	8002be0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3758      	adds	r7, #88	@ 0x58
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf8:	e04f      	b.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d04b      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c02:	f7fd fd59 	bl	80006b8 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d302      	bcc.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e04e      	b.n	8002cba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d037      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b80      	cmp	r3, #128	@ 0x80
 8002c2e:	d034      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b40      	cmp	r3, #64	@ 0x40
 8002c34:	d031      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d110      	bne.n	8002c66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2208      	movs	r2, #8
 8002c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f838 	bl	8002cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2208      	movs	r2, #8
 8002c56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e029      	b.n	8002cba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c74:	d111      	bne.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f81e 	bl	8002cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e00f      	b.n	8002cba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	bf0c      	ite	eq
 8002caa:	2301      	moveq	r3, #1
 8002cac:	2300      	movne	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d0a0      	beq.n	8002bfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b095      	sub	sp, #84	@ 0x54
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cf0:	e841 2300 	strex	r3, r2, [r1]
 8002cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e6      	bne.n	8002cca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3308      	adds	r3, #8
 8002d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	e853 3f00 	ldrex	r3, [r3]
 8002d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3308      	adds	r3, #8
 8002d1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d24:	e841 2300 	strex	r3, r2, [r1]
 8002d28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e5      	bne.n	8002cfc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d118      	bne.n	8002d6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	e853 3f00 	ldrex	r3, [r3]
 8002d44:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f023 0310 	bic.w	r3, r3, #16
 8002d4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d56:	61bb      	str	r3, [r7, #24]
 8002d58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5a:	6979      	ldr	r1, [r7, #20]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	e841 2300 	strex	r3, r2, [r1]
 8002d62:	613b      	str	r3, [r7, #16]
   return(result);
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1e6      	bne.n	8002d38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002d7e:	bf00      	nop
 8002d80:	3754      	adds	r7, #84	@ 0x54
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <memset>:
 8002d8a:	4402      	add	r2, r0
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d100      	bne.n	8002d94 <memset+0xa>
 8002d92:	4770      	bx	lr
 8002d94:	f803 1b01 	strb.w	r1, [r3], #1
 8002d98:	e7f9      	b.n	8002d8e <memset+0x4>
	...

08002d9c <__libc_init_array>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	4d0d      	ldr	r5, [pc, #52]	@ (8002dd4 <__libc_init_array+0x38>)
 8002da0:	4c0d      	ldr	r4, [pc, #52]	@ (8002dd8 <__libc_init_array+0x3c>)
 8002da2:	1b64      	subs	r4, r4, r5
 8002da4:	10a4      	asrs	r4, r4, #2
 8002da6:	2600      	movs	r6, #0
 8002da8:	42a6      	cmp	r6, r4
 8002daa:	d109      	bne.n	8002dc0 <__libc_init_array+0x24>
 8002dac:	4d0b      	ldr	r5, [pc, #44]	@ (8002ddc <__libc_init_array+0x40>)
 8002dae:	4c0c      	ldr	r4, [pc, #48]	@ (8002de0 <__libc_init_array+0x44>)
 8002db0:	f000 f818 	bl	8002de4 <_init>
 8002db4:	1b64      	subs	r4, r4, r5
 8002db6:	10a4      	asrs	r4, r4, #2
 8002db8:	2600      	movs	r6, #0
 8002dba:	42a6      	cmp	r6, r4
 8002dbc:	d105      	bne.n	8002dca <__libc_init_array+0x2e>
 8002dbe:	bd70      	pop	{r4, r5, r6, pc}
 8002dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc4:	4798      	blx	r3
 8002dc6:	3601      	adds	r6, #1
 8002dc8:	e7ee      	b.n	8002da8 <__libc_init_array+0xc>
 8002dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dce:	4798      	blx	r3
 8002dd0:	3601      	adds	r6, #1
 8002dd2:	e7f2      	b.n	8002dba <__libc_init_array+0x1e>
 8002dd4:	08002e48 	.word	0x08002e48
 8002dd8:	08002e48 	.word	0x08002e48
 8002ddc:	08002e48 	.word	0x08002e48
 8002de0:	08002e4c 	.word	0x08002e4c

08002de4 <_init>:
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	bf00      	nop
 8002de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dea:	bc08      	pop	{r3}
 8002dec:	469e      	mov	lr, r3
 8002dee:	4770      	bx	lr

08002df0 <_fini>:
 8002df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df2:	bf00      	nop
 8002df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df6:	bc08      	pop	{r3}
 8002df8:	469e      	mov	lr, r3
 8002dfa:	4770      	bx	lr
